CREATE TABLE PHYSICIAN(EMPLOYEEID INT PRIMARY KEY, NAME TEXT, POSITION TEXT, SSN INT);

CREATE TABLE PROCEDURES(CODE INT PRIMARY KEY, NAME TEXT, COST INT);

CREATE TABLE MEDICATION(CODE INT PRIMARY KEY, NAME TEXT, BRAND TEXT, DESCRIPTION TEXT);

CREATE TABLE BLOCK(FLOOR INT, CODE INT, PRIMARY KEY(FLOOR, CODE));

CREATE TABLE NURSE(EMPLOYEEID INT PRIMARY KEY, NAME TEXT, POSITION TEXT, REGISTERED BOOLEAN, SSN INT);

CREATE TABLE DEPARTMENT(DEPARTMENTID INT PRIMARY KEY, NAME TEXT, HEAD INT, FOREIGN KEY(HEAD) REFERENCES PHYSICIAN(EMPLOYEEID));

CREATE TABLE AFFILIATED_WITH(PHYSICIAN INT, DEPARTMENT INT, PRIMARYAFFILIATION BOOLEAN, PRIMARY KEY(PHYSICIAN, DEPARTMENT), 
FOREIGN KEY(PHYSICIAN) REFERENCES PHYSICIAN(EMPLOYEEID), FOREIGN KEY(DEPARTMENT) REFERENCES DEPARTMENT(DEPARTMENTID));

CREATE TABLE TRAINED_IN(PHYSICIAN INT, TREATMENT INT, CERTIFICATIONDATE DATETIME, CERTIFICATIONEXPIRES DATETIME, PRIMARY KEY(PHYSICIAN, TREATMENT),
FOREIGN KEY(PHYSICIAN) REFERENCES PHYSICIAN(EMPLOYEEID), FOREIGN KEY(TREATMENT) REFERENCES PROCEDURES(CODE));

CREATE TABLE PATIENT(SSN INT PRIMARY KEY, NAME TEXT, ADDRESS TEXT, PHONE TEXT, INSURANCEID INT, PCP INT, FOREIGN KEY(PCP) REFERENCES PHYSICIAN(EMPLOYEEID));

CREATE TABLE PRESCRIBES(PHYSICIAN INT, PATIENT INT, MEDICATION INT, DATE DATETIME, APPOINTMENT INT, DOSE TEXT, PRIMARY KEY(PHYSICIAN, PATIENT, MEDICATION,  DATE), 
FOREIGN KEY(PHYSICIAN) REFERENCES PHYSICIAN(EMPLOYEEID), FOREIGN KEY(PATIENT) REFERENCES PATIENT(SSN), FOREIGN KEY(MEDICATION) REFERENCES MEDICATION(CODE), 
FOREIGN KEY(APPOINTMENT) REFERENCES APPOINTMENT(APPOINTMENTID));

CREATE TABLE APPOINTMENT(APPOINTMENTID INT PRIMARY KEY, PATIENT INT, PREPNURSE INTEGER, PHYSICIAN INT, START DATETIME, END DATETIME,
EXAMINATIONROOM TEXT, FOREIGN KEY(PATIENT) REFERENCES PATIENT(SSN), FOREIGN KEY(PREPNURSE) REFERENCES NURSE(EMPLOYEEID),
FOREIGN KEY(PHYSICIAN) REFERENCES PHYSICIAN(EMPLOYEEID));

CREATE TABLE ROOM(NUMBER INT PRIMARY KEY, TYPE TEXT, BLOCKFLOOR INT, BLOCKCODE INT, UNAVAILABLE BOOLEAN, FOREIGN KEY(BLOCKFLOOR) REFERENCES BLOCK(FLOOR),
FOREIGN KEY(BLOCKCODE) REFERENCES BLOCK(CODE));

CREATE TABLE ON_CALL(NURSE INT, BLOCKFLOOR INT, BLOCKCODE INT, START DATETIME, END DATETIME, PRIMARY KEY(NURSE, BLOCKFLOOR, BLOCKCODE),
FOREIGN KEY(BLOCKFLOOR) REFERENCES BLOCK(FLOOR), FOREIGN KEY(BLOCKCODE) REFERENCES BLOCK(CODE), FOREIGN KEY(NURSE) REFERENCES NURSE(EMPLOYEEID));

CREATE TABLE STAY(STAYID INT PRIMARY KEY, PATIENT INT, ROOM INT, START DATETIME, END DATETIME, FOREIGN KEY(PATIENT) REFERENCES PATIENT(SSN), FOREIGN KEY(ROOM) REFERENCES ROOM(NUMBER));

CREATE TABLE UNDERGOES(PATIENT INT, PROCEDURES INT, STAY INT, DATE DATETIME, PHYSICIAN INT, ASSISTINGNURSE INT, PRIMARY KEY(PATIENT, PROCEDURES, STAY, DATE),
FOREIGN KEY(PATIENT) REFERENCES PATIENT(SSN), FOREIGN KEY(PROCEDURES) REFERENCES PROCEDURES(CODE), FOREIGN KEY(STAY) REFERENCES STAY(STAYID),
FOREIGN KEY(PHYSICIAN) REFERENCES PHYSICIAN(EMPLOYEEID), FOREIGN KEY(ASSISTINGNURSE) REFERENCES NURSE(EMPLOYEEID));

SELECT *FROM DEPARTMENT; SELECT *FROM AFFILIATED_WITH; SELECT *FROM TRAINED_IN; SELECT *FROM PHYSICIAN; SELECT *FROM APPOINTMENT; SELECT *FROM PRESCRIBES;
SELECT *FROM MEDICATION; SELECT *FROM PROCEDURES; SELECT *FROM PATIENT; SELECT *FROM ROOM; SELECT *FROM BLOCK; SELECT *FROM UNDERGOES; SELECT *FROM STAY; SELECT *FROM ON_CALL;
SELECT *FROM NURSE; 

METHOD 2: 

DROP TABLE IF EXISTS Physician;
CREATE TABLE Physician (
  EmployeeID INTEGER NOT NULL,
  Name VARCHAR(30) NOT NULL,
  Position VARCHAR(30) NOT NULL,
  SSN INTEGER NOT NULL,
  CONSTRAINT pk_physician PRIMARY KEY(EmployeeID)
); 

DROP TABLE IF EXISTS Department;
CREATE TABLE Department (
  DepartmentID INTEGER NOT NULL,
  Name VARCHAR(30) NOT NULL,
  Head INTEGER NOT NULL,
  CONSTRAINT pk_Department PRIMARY KEY(DepartmentID),
  CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID)
);

DROP TABLE IF EXISTS Affiliated_With;
CREATE TABLE Affiliated_With (
  Physician INTEGER NOT NULL,
  Department INTEGER NOT NULL,
  PrimaryAffiliation BOOLEAN NOT NULL,
  CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),                   **********************************************
  CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID),       ********************************
  PRIMARY KEY(Physician, Department)
);

DROP TABLE IF EXISTS Procedures;
CREATE TABLE Procedures (
  Code INTEGER PRIMARY KEY NOT NULL,
  Name VARCHAR(30) NOT NULL,
  Cost REAL NOT NULL
);

DROP TABLE IF EXISTS Trained_In;
CREATE TABLE Trained_In (
  Physician INTEGER NOT NULL,
  Treatment INTEGER NOT NULL,
  CertificationDate DATETIME NOT NULL,
  CertificationExpires DATETIME NOT NULL,
  CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), **********************************************
  CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code), **********************************************
  PRIMARY KEY(Physician, Treatment)
);

DROP TABLE IF EXISTS Patient;
CREATE TABLE Patient (
  SSN INTEGER PRIMARY KEY NOT NULL,
  Name VARCHAR(30) NOT NULL,
  Address VARCHAR(30) NOT NULL,
  Phone VARCHAR(30) NOT NULL,
  InsuranceID INTEGER NOT NULL,
  PCP INTEGER NOT NULL,
  CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID)   **********************************************
);

DROP TABLE IF EXISTS Nurse;
CREATE TABLE Nurse (
  EmployeeID INTEGER PRIMARY KEY NOT NULL,
  Name VARCHAR(30) NOT NULL,
  Position VARCHAR(30) NOT NULL,
  Registered BOOLEAN NOT NULL,
  SSN INTEGER NOT NULL
);

DROP TABLE IF EXISTS Appointment;
CREATE TABLE Appointment (
  AppointmentID INTEGER PRIMARY KEY NOT NULL,
  Patient INTEGER NOT NULL,    
  PrepNurse INTEGER,
  Physician INTEGER NOT NULL,
  Start DATETIME NOT NULL,
  End DATETIME NOT NULL,
  ExaminationRoom TEXT NOT NULL,
  CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),    **********************************************
  CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID),    **********************************************
  CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID)
);

DROP TABLE IF EXISTS Medication;
CREATE TABLE Medication (
  Code INTEGER PRIMARY KEY NOT NULL,
  Name VARCHAR(30) NOT NULL,
  Brand VARCHAR(30) NOT NULL,
  Description VARCHAR(30) NOT NULL
);

DROP TABLE IF EXISTS Prescribes;
CREATE TABLE Prescribes (
  Physician INTEGER NOT NULL,
  Patient INTEGER NOT NULL, 
  Medication INTEGER NOT NULL, 
  Date DATETIME NOT NULL,
  Appointment INTEGER,  
  Dose VARCHAR(30) NOT NULL,
  PRIMARY KEY(Physician, Patient, Medication, Date),
  CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),
  CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),
  CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code),
  CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID)
);

DROP TABLE IF EXISTS Block;
CREATE TABLE Block (
  BlockFloor INTEGER NOT NULL,
  BlockCode INTEGER NOT NULL,
  PRIMARY KEY(BlockFloor, BlockCode)
); 

DROP TABLE IF EXISTS Room;
CREATE TABLE Room (
  RoomNumber INTEGER PRIMARY KEY NOT NULL,
  RoomType VARCHAR(30) NOT NULL,
  BlockFloor INTEGER NOT NULL,  
  BlockCode INTEGER NOT NULL,  
  Unavailable BOOLEAN NOT NULL,
  CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode)
);

DROP TABLE IF EXISTS On_Call;
CREATE TABLE On_Call (
  Nurse INTEGER NOT NULL,
  BlockFloor INTEGER NOT NULL, 
  BlockCode INTEGER NOT NULL,
  OnCallStart DATETIME NOT NULL,
  OnCallEnd DATETIME NOT NULL,
  PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd),
  CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID),
  CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) 
);

DROP TABLE IF EXISTS Stay;
CREATE TABLE Stay (
  StayID INTEGER PRIMARY KEY NOT NULL,
  Patient INTEGER NOT NULL,
  Room INTEGER NOT NULL,
  StayStart DATETIME NOT NULL,
  StayEnd DATETIME NOT NULL,
  CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),
  CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber)
);

DROP TABLE IF EXISTS Undergoes;
CREATE TABLE Undergoes (
  Patient INTEGER NOT NULL,
  Procedures INTEGER NOT NULL,
  Stay INTEGER NOT NULL,
  DateUndergoes DATETIME NOT NULL,
  Physician INTEGER NOT NULL,
  AssistingNurse INTEGER,
  PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes),
  CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),
  CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code),
  CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID),
  CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),
  CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID)
);


1.
SELECT Name FROM Physician WHERE EmployeeID IN ( SELECT Physician FROM Undergoes U WHERE NOT EXISTS ( SELECT * FROM Trained_In WHERE Treatment = Procedures AND Physician = U.Physician));
/
SELECT Name FROM Physician WHERE EmployeeID IN(SELECT Undergoes.Physician FROM Undergoes LEFT JOIN Trained_In ON Undergoes.Physician=Trained_In.Physician AND Undergoes.Procedures=Trained_In.Treatment WHERE Treatment IS NULL);
/
SELECT Physician.Name FROM Physician INNER JOIN Undergoes ON Physician.EmployeeID = Undergoes.Physician LEFT JOIN Trained_In ON Undergoes.Procedures = Trained_In.Treatment  
AND Physician.EmployeeID = Trained_In.Physician WHERE Trained_In.Treatment IS NULL GROUP BY Physician.EmployeeID;

2. 
SELECT P.Name AS Physician, Pr.Name AS Procedures, U.Date, Pt.Name AS Patient FROM Physician P, Undergoes U, Patient Pt, Procedures Pr WHERE U.Patient = Pt.SSN AND 
U.Procedures = Pr.Code AND U.Physician = P.EmployeeID AND NOT EXISTS(SELECT * FROM Trained_In T WHERE T.Treatment = U.Procedures AND T.Physician = U.Physician);

3.
SELECT Name FROM Physician WHERE EmployeeID IN(SELECT Physician FROM Undergoes U WHERE Date >(SELECT CertificationExpires FROM Trained_In T WHERE T.Physician = U.Physician AND T.Treatment = U.Procedures));

4. 
SELECT P.Name AS Physician, Pr.Name AS Procedures, U.Date, Pt.Name AS Patient, T.CertificationExpires FROM Physician P, Undergoes U, Patient Pt, Procedures Pr, Trained_In T
WHERE U.Patient = Pt.SSN AND U.Procedures = Pr.Code AND U.Physician = P.EmployeeID AND Pr.Code = T.Treatment AND P.EmployeeID = T.Physician AND U.Date > T.CertificationExpires;

5.SELECT Pt.Name AS Patient, Ph.Name AS Physician, N.Name AS Nurse, A.Start, A.End, A.ExaminationRoom, PhPCP.Name AS PCP FROM Patient Pt, Physician Ph, Physician PhPCP, Appointment 
A LEFT JOIN Nurse N ON A.PrepNurse = N.EmployeeID WHERE A.Patient = Pt.SSN AND A.Physician = Ph.EmployeeID AND Pt.PCP = PhPCP.EmployeeID AND A.Physician <> Pt.PCP;

6. SELECT * FROM Undergoes U WHERE Patient <>(SELECT Patient FROM Stay S WHERE U.Stay = S.StayID);

7. SELECT N.Name FROM Nurse N WHERE EmployeeID IN(SELECT OC.Nurse FROM On_Call OC, Room R WHERE OC.BlockFloor = R.BlockFloor AND OC.BlockCode = R.BlockCode AND R.Number = 123);

8. SELECT ExaminationRoom, COUNT(AppointmentID) AS Number FROM Appointment GROUP BY ExaminationRoom;

9.
SELECT Pt.Name "PATIENT", PhPCP.Name "PHYSICIAN" FROM Patient Pt, Physician PhPCP WHERE Pt.PCP = PhPCP.EmployeeID AND EXISTS
( SELECT * FROM Prescribes Pr WHERE Pr.Patient = Pt.SSN AND Pr.Physician = Pt.PCP ) AND EXISTS
( SELECT * FROM Undergoes U, Procedures Pr WHERE U.Procedures = Pr.Code AND U.Patient = Pt.SSN AND Pr.Cost > 5000) AND 2 <=
( SELECT COUNT(A.AppointmentID) FROM Appointment A, Nurse N WHERE A.PrepNurse = N.EmployeeID AND N.Registered = 1 ) AND NOT Pt.PCP IN
( SELECT Head FROM Department );


